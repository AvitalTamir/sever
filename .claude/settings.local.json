{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(zig build)",
      "Bash(grep:*)",
      "Bash(zig build:*)",
      "Bash(./zig-out/bin/sev:*)",
      "Bash(curl:*)",
      "Bash(ls:*)",
      "Bash(./simple_math)",
      "Bash(./hello_world)",
      "Bash(./assignment_test)",
      "Bash(./while_test)",
      "Bash(./if_test)",
      "Bash(./if_else_test)",
      "Bash(./if_simple_test)",
      "Bash(./struct_test)",
      "Bash(./struct_assign_test)",
      "Bash(./array_test)",
      "Bash(./sev:*)",
      "Bash(./string_concat_test)",
      "Bash(rg:*)",
      "Bash(./examples/pattern_matching_test)",
      "Bash(./pattern_matching_test)",
      "Bash(./pattern_matching_wildcard)",
      "Bash(./examples/enum_test)",
      "Bash(find:*)",
      "Bash(./enum_test)",
      "Bash(./exception_test)",
      "Bash(./exception_test_simple)",
      "Bash(zig run:*)",
      "Bash(./examples/collections_test)",
      "Bash(./collections_test)",
      "Bash(./examples/tuples_records_test:*)",
      "Bash(./tuples_records_test)",
      "Bash(./generics_simple_test)",
      "Bash(./examples/interfaces_test)",
      "Bash(./interfaces_test)",
      "Bash(./union_test)",
      "Bash(rm:*)",
      "Bash(cat:*)",
      "Bash(./http_test)",
      "Bash(./file_io_test)",
      "Bash(./file_ops_test)",
      "Bash(./json_test)",
      "Bash(./json_http_test)",
      "Bash(./string_test)",
      "Bash(sed:*)",
      "Bash(./dist/sev build examples/simple_math.sirs.json)",
      "Bash(./dist/simple_math)",
      "Bash(./dist/sev test:*)",
      "Bash(./dist/sev doc examples/simple_math.sirs.json)",
      "Bash(./dist/sev doc examples/string_test.sirs.json)",
      "Bash(./dist/sev:*)",
      "Bash(./dist/async_test)",
      "Bash(./dist/concurrent_test)",
      "Bash(./dist/channel_test)",
      "Bash(./dist/datetime_test)",
      "Bash(./dist/simple_regex_test)",
      "Bash(./dist/ffi_test)",
      "Bash(./dist/optimization_test)",
      "Bash(./dist/debug_test)",
      "Bash(zig test:*)",
      "Bash(gdb:*)",
      "Bash(diff:*)",
      "Bash(cp:*)",
      "Bash(../dist/sev build while_test.sirs.json)",
      "Bash(for i in {1..5})",
      "Bash(do echo \"Run $i:\")",
      "Bash(done)",
      "Bash(zig ast-check:*)",
      "Bash(./dist/gaussian_mixture_model)",
      "Bash(./dist/hierarchical_linear_model)",
      "Bash(./dist/observability_anomaly_detection)",
      "Bash(true)",
      "Bash(./dist/sev convert examples/simple_math.sirs.json test.sev)",
      "Bash(./dist/sev build test.sev)",
      "Bash(./dist/sev convert test.sev test_roundtrip.json)",
      "Bash(./dist/test.sev)",
      "Bash(./dist/sev convert examples/simple_math.sirs.json test2.sev)",
      "Bash(for i in {1..3})",
      "Bash(do echo \"=== Run $i ===\")",
      "Bash(/dev/null)",
      "Bash(./dist/minimal_anomaly.sirs.l)",
      "Bash(./dist/debug_types.sirs.l)",
      "Bash(./dist/debug_distributions.sirs.l)",
      "Bash(./dist/debug_nested_ops.sirs.l)",
      "Bash(./dist/debug_param_var.sirs.l)",
      "Bash(./dist/two_samples.sirs.l)",
      "Bash(./dist/test_bernoulli.sirs.l)",
      "Bash(./dist/practical_anomaly.sirs.l)",
      "Bash(echo)",
      "Bash(./dist/timeseries_anomaly.sirs.l)",
      "Bash(./dist/observability_anomaly_detection.sirs.l)",
      "Bash(./dist/production_anomaly_detection.sirs.l)",
      "Bash(./dist/adaptive_anomaly_mcmc.sirs.l)",
      "Bash(./dist/clean_alerting_system.sirs.l)",
      "Bash(./dist/seasonal_anomaly_detection.sirs.l)",
      "Bash(./examples/anomaly_detection_api.sirs.l)",
      "Bash(./examples/http_demo.sirs.l)",
      "Bash(./dist/http_demo.sirs.l)",
      "Bash(./dist/http_server_working.sirs.l)",
      "Bash(./dist/anomaly_api_complete.sirs.l)",
      "Bash(dist/sev build:*)",
      "Bash(mv:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== Testing $file ===\")",
      "Bash(echo \"✅ $file compiled successfully\")",
      "Bash(echo:*)",
      "Bash(dist/test_if_only:*)",
      "Bash(dist/test_if_else:*)",
      "Bash(dist/test_mutable:*)",
      "Bash(dist/test_while_mutable)",
      "Bash(do echo \"Testing $file...\")",
      "Bash(if dist/sev build \"$file\")",
      "Bash(then echo \"✅ $file compiles\")",
      "Bash(else echo \"❌ $file failed\")",
      "Bash(fi)",
      "Bash(do echo \"Testing $file:\")",
      "Bash(if timeout 5 /Users/avitaltamir/projects/sever1/dist/sev build \"$file\")",
      "Bash(then echo \"✅ SUCCESS\")",
      "Bash(else echo \"❌ FAILED\")",
      "Bash(if /Users/avitaltamir/projects/sever1/dist/sev build \"$file\")",
      "Bash(do if ! dist/sev build \"$file\")",
      "Bash(then echo \"❌ FAILING: $file\")",
      "Bash(dist/test_for_loop:*)",
      "Bash(if ./dist/sev build \"$file\")",
      "Bash(then echo \"✅ $file\")",
      "Bash(else echo \"❌ $file\")",
      "Bash(./dist/calculator_final)",
      "Bash(./dist/test_string_comparison:*)"
    ],
    "deny": []
  }
}